// Homelab Inventory Example

master1 192.168.?.? - Virtual Box Ubuntu Server on Windows Machine
master2 192.168.?.? - Ubuntu Server
workerB 192.168.?.? - Ubuntu Desktop (machines that are also providing gui for specific graphical application usage)
workerD 192.168.?.? - Ubuntu Server
workerS 192.168.?.? - Ubuntu Desktop
workerM 192.168.?.? - Ubuntu Server

// Haha yes i see it, the letters are in fact reference to physical machines location, with hilarious results

// Dev tools implemented from: (Note: at my current level of experience, i have been unable to get 2 way communication
// working, so for now others on the network cannot communicate back, only receive commands from this machine, which
// is good enough for now
overseer - wsl2 Ubuntu Server on Windows Machine

// Special Guest - We have this old laptop which the other half uses from the woodworking shop or
// barn to view files kept in storage, so this is to remind me to monitor it and update as needed
laptopName 192.168.?.? - low resource laptop using Lubuntu, added in for manual updating and monitoring

------------------------------------------------------------------------------------------------------------------------
// Remote Machines

// Install latest Ubuntu LTS Server/Desktop as specified above
// Set initial user on each to an admin name and password chosen (this is to be the same for all)
// You can choose to install ssh as part of the server installation, do so

// Once installed check ssh is installed and running on each
sudo systemctl status ssh

// If not (desktop version) install
sudo apt install openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh

------------------------------------------------------------------------------------------------------------------------
-- // OVERSEER ONLY //
// This is a WSL installation of the latest Ubuntu LTS, do NOT use the same admin name/password as the remote machines

                                  ----------------------------------------------------
// If wished can change the hostname
sudo nano /etc/wsl.conf
// add
[network]
hostname = 'new_name'
generateHosts = false
// save and exit
sudo nano /etc/hosts
// replace all occurrences of the current hostname with the new one
// save and exit
wsl.exe --shutdown
// use windows powershell to check if it has completely shutdown, do not restart till it has
wsl --list --running

                                  ----------------------------------------------------

// Check network connectivity to any of your remote machines
ping 192.168.?.?

// Create private key for SSH connection

// Generate a new 4096 bits SSH key pair with your email address as a comment
// You will be prompted to specify the file name: (/home/chosen_admin_name/.ssh/id_rsa), this default should be ok
// Press Enter to accept and continue
// To leave the passphrase empty, just Press Enter, otherwise type your phrase
// You will be asked to repeat your phrase
// Output should be - /home/chosen_admin_name/.ssh/id_rsa /home/chosen_admin_name/.ssh/id_rsa.pub
ssh-keygen -t rsa -b 4096 -C "your_email_address"

// Give each remote machine a copy of the public key, will have to type yes and password
ssh-copy-id chosen_admin_name@remote_ip_address

// Login to each remote and check only the key you wanted is added
ssh chosen_admin_name@remote_ip_address
nano ~/.ssh/authorized_keys
// exit and return to overseer

                                  ----------------------------------------------------

// Update/Upgrade and ensure Git is installed
sudo apt update && sudo apt upgrade && sudo apt install git -y

// Clone your ansible repo (you will need to input personal access token as password
git clone https://github.com/YourName/ansible

// copy your version controlled config file to where ansible will look for it
cp ~/ansible/vc_ansible.cfg ~/ansible.cfg

// *** IMPORTANT *** - Remember if you push changes to the repo, you will need to update the overseer's copy
cd ansible
git pull
// also if the ansible.cfg file is altered then you need to repeat the copy command
cd ~
cp ~/ansible/vc_ansible.cfg ~/ansible.cfg

                                  ----------------------------------------------------

// Add ansible repository to apt
sudo add-apt-repository --yes --update ppa:ansible/ansible

// Ensure software-properties-common is installed and install ansible
sudo apt install software-properties-common ansible -y

                                  ----------------------------------------------------

// Create ssh configuration file
nano ~/.ssh/config

// list your remote servers like so
Host chosen_host_name (eg: master1, worker1, aws3, however you find easiest to refer to them)
    HostName servers_url
    User chosen_admin_name
    Port 22

Host chosen_host_name
    HostName servers_url
    User chosen_admin_name
    Port 22

// save and exit

// set permissions
chmod 600 ~/.ssh/config

                                  ----------------------------------------------------

// Run the secure playbook you made to implement better security
// You will be asked for the Become(sudo) password because of the -K flag
ansible-playbook -K ~/ansible/secure.yml

// test connection to each remote machine
ssh -p your_chosen_port chosen_admin_name@remote_ip_address

// Update the ssh config file made earlier
nano ~/.ssh/config

// for each remote host changed by the secure_server playbook, update the Port: entry to your chosen port
Host remote_server_name
    HostName servers_url
    User chosen_admin_name
    Port your_chosen_port

// save and exit

// test connection to the changed remote machine using the hostname you gave it eg:
ssh master1

// For machines with GUI, create a non sudoer user with a chosen name and password,
// to allow others to use graphical applications on it.
sudo adduser chosen_name
